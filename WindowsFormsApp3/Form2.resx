<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAASAAAAFgAAABgAAAAaAAAAGgAA
        ABoAAAAaAAAAGgAAABoAAAAaAAAAGgAAABgAAAAUAAAAEAAAAAwAAAAGAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAQAAAAGAAAACIAAAAqAAAAMh9D
        AKcoWADNKFgAzShYAM0oWADNKFgAzShYAM0fQwCnAAAAMAAAACoAAAAgAAAAGAAAAA4AAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAMAAAAEgAA
        ABYAAAAYLV4AzX7sAP9+7AD/fuwA/37sAP9+7AD/fuwA/y1eAM0AAAAYAAAAFAAAABAAAAAMAAAABgAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAxZQDNfOkA/3zpAP986QD/fOkA/3zpAP986QD/MWUAzQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADZsAM165AD/euQA/3rkAP965AD/euQA/3rkAP82bADNAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPHUAzXnhAP944AD/eOAA/3jgAP944AD/eOAA/zx1
        AM0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCfgDNeN4A/3bbAP922wD/dtsA/3bb
        AP922wD/Qn4AzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWCAM143AD/dNUA/3TV
        AP901QD/dNUA/3TWAP9FggDNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAR4QAzXfa
        AP9xzwD/cc8A/3HPAP9xzwD/c9IA/0eEAM0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABIhgDNeNoA/2/KAP9vygD/b8oA/2/KAP9xzgD/SIYAzQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEqIAM152gD/bMQA/2zEAP9sxAD/bMQA/3DLAP9KiADNAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAS4oAzXvcAP9qvgD/ar4A/2q+AP9qvgD/cMgA/0uKAM0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATY0AmU2NAM1NjQDNTY0AzU2N
        AM1NjQDNTY0AzU2NAM1NjQDNTY0AzU2NAM1NjQDNfd4A/2i5AP9ouQD/aLkA/2i5AP9vxQD/TY0AzU2N
        AM1NjQDNTY0AzU2NAM1NjQDNTY0AzU2NAM1NjQDNTY0AzU2NAM1NjQCZAAAAAAAAAABOjwDNn/8f/5T/
        BP+U/wT/k/8C/5L/AP+F6gD/eNQA/3bQAP91zgD/c8wA/3PLAP9yygD/ZbQA/2W0AP9ltAD/ZbQA/2q8
        AP9uwwD/bcEA/23BAP9svwD/bL8A/2u+AP9rvQD/arwA/2q7AP9pugD/bL8A/06PAM0AAAAAAAAAAFCR
        AM2i/yT/iO4A/4juAP+I7gD/iO4A/4juAP+E5wD/dc0A/2i3AP9ksAD/ZLAA/2SwAP9ksAD/ZLAA/2Sw
        AP9ksAD/ZLAA/2SwAP9ksAD/ZLAA/2SwAP9ksAD/ZLAA/2SwAP9ksAD/aLcA/3XNAP+G6wD/UJEAzQAA
        AAAAAAAAUZMAzaT/Kf+I7gD/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/h+wA/37cAP9xxgD/abgA/2Ou
        AP9irAD/YqwA/2KsAP9irAD/YqwA/2KsAP9irAD/YqwA/2OuAP9puAD/ccYA/37cAP+H7AD/iO4A/432
        AP9RkwDNAAAAAAAAAABTlQDNpv8v/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4ju
        AP+I7gD/hegA/3/eAP971gD/d9AA/3bOAP92zgD/d9AA/3vWAP9/3gD/hegA/4juAP+I7gD/iO4A/4ju
        AP+I7gD/jvgA/1OVAM0AAAAAAAAAAFOXAM2o/zL/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4ju
        AP+I7gD/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4juAP+I7gD/iO4A/4ju
        AP+I7gD/iO4A/4juAP+P+gD/U5cAzQAAAAAAAAAAVZkAzar/Of+q/zb/qf80/6j/Mv+n/zD/pv8v/6b/
        L/+l/y3/pP8r/6T/Kf+j/yb/ov8k/4juAP+I7gD/iO4A/4juAP+V/wb/nv8b/53/Gf+c/hf/nP4X/5v+
        Ff+a/hP/mf4R/5n+D/+Y/g3/mP4N/5f+C/9VmQDNAAAAAAAAAABWmwCZVpsAzVabAM1WmwDNVpsAzVab
        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
        D///8A////AP///wD///8A////AP//////8=
</value>
  </data>
</root>